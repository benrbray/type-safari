@top Program { expr }

@precedence {
  letIn,
  highprec,
  exp @left
}

@skip { space | LineComment }

/* ---- general ----------------------------------------- */

kw<term>  { @specialize[@name={term}]<Identifier, term> }
sym<term> { @specialize[@name={term}]<symbols, term> }

parens<rule> { "(" rule ")" }

/* ---- types ------------------------------------------- */

forall { sym<"∀"> | kw<"forall"> }

Type { "_" }


/* --- terms -------------------------------------------- */

// expression with optional type annotation
expr {
  expr0 |
  TypeAnn { expr0 (!highprec "::" Type) }
}


// expression, without type annotation
expr0 {
  LetExpr { kw<"let"> Decl kw<"in"> expr } |
  IfThenElse { kw<"if"> expr kw<"then"> expr kw<"else"> expr } |
  Abs { lambda Identifier lambdaArrow expr } |
  BinaryExpr |
  UnaryExpr |
  Identifier |
  literal |
  AppExpr |
  parens<expr>
}

Decl {
  Identifier sym<"="> expr
}

/* ---- lambda ---- */

lambda      { @specialize[@name=Lambda]<symbols, "\\" | "λ"> }
lambdaArrow { @specialize[@name=LambdaArrow]<symbols, "->">  }

/* ---- application ---- */

AppExpr { (Identifier|parens<expr>) (Identifier|parens<expr>|AppExpr) }

/* ---- operators ---- */

plusOp { @specialize[@name=ArithOp]<symbols, "+"|"-"> }
multOp { @specialize[@name=ArithOp]<symbols, "*"|"/"> }
cmpOp  { @specialize[@name=CmpOp]<symbols, ">"|">="|"<"|"<="> }
binOp  { plusOp | multOp | cmpOp }

BinaryExpr { expr !exp binOp expr }

UnaryExpr { plusOp expr }

/* ---- literals ---- */

literal {
  @specialize[@name=BooleanLiteral]<upperIdent, "True" | "False"> |
  IntLiteral |
  StringLiteral
}

/* ---- tokens ------------------------------------------ */

@tokens {
  /* characters */
  space { $[ \t\n\r]+ }
  digit { std.digit }
  
  /* named identifiers */
  underline {"_"}
  small { std.asciiLowercase | underline}
  large { std.asciiUppercase } 
  identchar { (small | large | digit)* }
  Identifier { small identchar }
  upperIdent { large identchar }
  
  /* symbols */
  symbol { "+" | "-" | "*" | "/" |
           "<" | ">" | "=" |
           "#" | "?" | "@" |
           "\\" | "λ" | "∀" }
  symbols { (symbol)+ }
  
  /* literals */
  IntLiteral { (digit)+ }
  StringLiteral { '"' (!["\\] | "\\" _)* '"' }
  
  /* comments */
  LineComment { "--" ("-")* ![\n]* }

  "(" ")" // TODO is it necessary to keep these on same line?

  @precedence { LineComment, symbols } // resolve conflict between -- and -
}

@detectDelim