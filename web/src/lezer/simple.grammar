@top Program { expr }

@precedence {
  letIn,
  highprec,
  exp @left
}

@skip { space | LineComment }

/* ---- character sets ---------------------------------- */

/* ---- types ------------------------------------------- */

forall { sym<"∀"> | kw<"forall"> }

Type { "_" }

/* --- terms -------------------------------------------- */

// expression with optional type annotation
expr {
  expr0 |
  TypeAnn { expr0 (!highprec "::" Type) }
}

// expression, without type annotation
expr0 {
  LetExpr { kw<"let"> Decl kw<"in"> expr } |
  IfThenElse { kw<"if"> expr kw<"then"> expr kw<"else"> expr } |
  Abs { lambda Identifier lambdaArrow expr } |
  BinaryExpr |
  UnaryExpr |
  Identifier |
  literal |
  parens<expr>
}

parens<rule> { "(" rule ")" }

Decl {
  Identifier sym<"="> expr
}

kw<term>  { @specialize[@name={term}]<Identifier, term> }
sym<term> { @specialize[@name={term}]<Symbol, term> }

/* ---- lambda ---- */

lambda      { @specialize[@name=Lambda]<Symbol, "\\" | "λ"> }
lambdaArrow { @specialize[@name=LambdaArrow]<Symbol, "->">  }

/* ---- infix ---- */

plusOp    { @specialize[@name=ArithOp]<Symbol, "+"|"-"> }
multOp    { @specialize[@name=ArithOp]<Symbol, "*"|"/"> }
cmpOp   { @specialize[@name=CmpOp]<Symbol, ">"|">="|"<"|"<="> }
binOp { plusOp | multOp | cmpOp }

BinaryExpr { expr !exp binOp expr }

UnaryExpr { plusOp expr }

/* ---- literals ---- */

literal {
  boolean |
  IntLiteral |
  StringLiteral
}

boolean { @specialize[@name=BooleanLiteral]<upperIdent, "True" | "False"> }

/* ---- tokens ------------------------------------------ */

@tokens {
  underline {"_"}
  digit { std.digit }
  dashes {"--" ("-")*}
  small { std.asciiLowercase | underline}
  large { std.asciiUppercase }

  symbol { "#" | "?" | "*" | "+" | "." | "/"
           "<" | "=" | ">" | "@" | "-" |
           "\\" | "λ" | "∀" }

  identchar { (small | large | digit)* }

  Identifier { small identchar }
  upperIdent { large identchar }

  Symbol { (symbol)+ }

  IntLiteral { (digit)+ }
  StringLiteral { '"' (!["\\] | "\\" _)* '"' }

  LineComment { dashes ![\n]* }

  space { $[ \t\n\r]+ }

  "(" ")"

  @precedence { LineComment, Symbol } // resolve conflict between -- and -
}

@detectDelim